"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contextMock = () => ({
    callbackWaitsForEmptyEventLoop: false,
    functionName: '',
    functionVersion: '',
    invokedFunctionArn: '',
    memoryLimitInMB: 512,
    awsRequestId: '',
    logGroupName: '',
    logStreamName: '',
    identity: undefined,
    clientContext: undefined,
    getRemainingTimeInMillis: () => 0,
    done: () => { },
    fail: () => { },
    succeed: () => { },
});
exports.apiGatewayContext = () => ({
    accountId: '',
    apiId: '',
    authorizer: null,
    connectedAt: undefined,
    connectionId: undefined,
    domainName: undefined,
    eventType: undefined,
    extendedRequestId: undefined,
    httpMethod: '',
    identity: {
        accessKey: '',
        accountId: '',
        apiKey: '',
        apiKeyId: '',
        caller: '',
        cognitoAuthenticationProvider: '',
        cognitoAuthenticationType: '',
        cognitoIdentityId: '',
        cognitoIdentityPoolId: '',
        sourceIp: '',
        user: '',
        userAgent: '',
        userArn: '',
    },
    messageDirection: undefined,
    messageId: null,
    path: '',
    stage: '',
    requestId: '',
    requestTime: undefined,
    requestTimeEpoch: 0,
    resourceId: '',
    resourcePath: '',
    routeKey: undefined,
});
exports.apiGatewayEventMock = () => ({
    body: '',
    httpMethod: 'GET',
    headers: {},
    queryStringParameters: {},
    multiValueHeaders: {},
    isBase64Encoded: false,
    path: '',
    pathParameters: {},
    multiValueQueryStringParameters: {},
    stageVariables: {},
    requestContext: exports.apiGatewayContext(),
    resource: '',
});
exports.apiGatewayProxyResultMock = (body, headers, statusCode = 200) => ({
    statusCode,
    body: body ? JSON.stringify(body) : '',
    headers: headers || undefined,
});
exports.login = async (server, email, password) => {
    const base64Password = Buffer.from(`${email}:${password}`).toString('base64');
    const { id_token, access_token } = (await server
        .post('/auth/login')
        .set('Authorization', `Basic ${base64Password}`)).body;
    const accountId = JSON.parse(Buffer.from(id_token.split('.')[1], 'base64').toString('ascii')).aud;
    return { accountId, accessToken: access_token, idToken: id_token };
};
exports.logout = async (server, token) => {
    return server.delete('/auth/logout').set('Authorization', `Bearer ${token}`);
};
